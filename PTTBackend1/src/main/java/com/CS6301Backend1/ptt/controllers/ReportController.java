package com.CS6301Backend1.ptt.controllers;

import java.time.OffsetDateTime;
import java.time.format.DateTimeParseException;
import java.util.*;
import javax.validation.Valid;

import com.CS6301Backend1.ptt.objects.Report;
import com.CS6301Backend1.ptt.objects.Sessions2;
import com.CS6301Backend1.ptt.objects.User;
import com.CS6301Backend1.ptt.repositories.ProjectsRepository;
import com.CS6301Backend1.ptt.objects.Projects;
import com.CS6301Backend1.ptt.repositories.UserRepository;
import com.CS6301Backend1.ptt.objects.Sessions;
import com.CS6301Backend1.ptt.repositories.SessionsRepository;
import com.CS6301Backend1.ptt.views.ReportViews;
import org.springframework.http.converter.json.MappingJacksonValue;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;


@RestController
public class ReportController {

    @Autowired // This means to get the bean called projectsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProjectsRepository projectsRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private SessionsRepository sessionsRepository;

    // @Autowired
    // private Report report;

    @CrossOrigin(origins = {"http://localhost:3000", "http://gazelle.cc.gatech.edu:9102", "http://gazelle.cc.gatech.edu:9104"})
    @GetMapping("/ptt/users/{userId}/projects/{projectId}/report")
    public @ResponseBody ResponseEntity<MappingJacksonValue> getprojectSessions(@PathVariable int userId, @PathVariable int projectId, @RequestParam(value="includeCompletedPomodoros",defaultValue="false") Boolean includeCompletedPomodoros, @RequestParam(value="includeTotalHoursWorkedOnProject",defaultValue="false") Boolean includeTotalHoursWorkedOnProject, @RequestParam(value="to") String to, @RequestParam(value="from") String from) {
        Projects oldProject = projectsRepository.getUsersProject(userId, projectId);
        if(oldProject == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        User mappedUser = oldProject.getUser();
        if (mappedUser.getId() != userId) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        try {
            OffsetDateTime fromTime = OffsetDateTime.parse(from);
            OffsetDateTime toTime = OffsetDateTime.parse(to);
            // newSession.setHoursWorked(Duration.between(st, et).toHours());
        } catch (DateTimeParseException e) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }            

        OffsetDateTime fromTime = OffsetDateTime.parse(from);
        OffsetDateTime toTime = OffsetDateTime.parse(to);

        if (fromTime.compareTo(toTime)>0 ) {
            return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
        }

        Collection<Sessions> allSessions = sessionsRepository.getSessions(userId, projectId);

        Report reportResponse = new Report(allSessions,from,to,includeCompletedPomodoros,includeTotalHoursWorkedOnProject);
        MappingJacksonValue result = new MappingJacksonValue(reportResponse);
        if(includeCompletedPomodoros && includeTotalHoursWorkedOnProject){
            result.setSerializationView(ReportViews.IncludeAll.class);
        }else if(includeCompletedPomodoros){
            result.setSerializationView(ReportViews.IncludeCompleted.class);
        }else if(includeTotalHoursWorkedOnProject){
            result.setSerializationView(ReportViews.IncludeHours.class);
        }else{
            result.setSerializationView(ReportViews.IncludeDefault.class);
        }
        return new ResponseEntity<>(result, HttpStatus.OK);
//        return new ResponseEntity<>(new Report(allSessions,from,to,includeCompletedPomodoros,includeTotalHoursWorkedOnProject), HttpStatus.OK);
    }

}
