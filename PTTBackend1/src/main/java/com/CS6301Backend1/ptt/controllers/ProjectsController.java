package com.CS6301Backend1.ptt.controllers;

import java.util.*;
import javax.validation.Valid;

import com.CS6301Backend1.ptt.objects.User;
import com.CS6301Backend1.ptt.repositories.ProjectsRepository;
import com.CS6301Backend1.ptt.objects.Projects;
import com.CS6301Backend1.ptt.repositories.UserRepository;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;


@RestController
public class ProjectsController {

    @Autowired // This means to get the bean called projectsRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private ProjectsRepository projectsRepository;

    @Autowired
    private UserRepository userRepository;

    @CrossOrigin(origins = {"http://localhost:3000", "http://gazelle.cc.gatech.edu:9102", "http://gazelle.cc.gatech.edu:9104"})
    @GetMapping("/ptt/users/{userId}/projects")
    public @ResponseBody ResponseEntity<Iterable<Projects>> getUsersProjects(@PathVariable int userId) {
        Optional<User> result = userRepository.findById(userId);
        if (!result.isPresent()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(projectsRepository.getUsersProjects(userId), HttpStatus.OK);
    }

    @CrossOrigin(origins = {"http://localhost:3000", "http://gazelle.cc.gatech.edu:9102", "http://gazelle.cc.gatech.edu:9104"})
    @GetMapping("/ptt/users/{userId}/projects/{projectId}")
    public @ResponseBody ResponseEntity<Projects> getProject(@PathVariable int userId, @PathVariable int projectId) {
        Projects curProject = projectsRepository.getUsersProject(userId, projectId);
        if (curProject!=null) {
            return new ResponseEntity<>(curProject, HttpStatus.OK);
        } else {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @CrossOrigin(origins = {"http://localhost:3000", "http://gazelle.cc.gatech.edu:9102", "http://gazelle.cc.gatech.edu:9104"})
    @PostMapping("/ptt/users/{userId}/projects")
    public ResponseEntity<Projects> postProject(@PathVariable int userId, @Valid @RequestBody Projects newProject) {
        Optional<User> result = userRepository.findById(userId);
        if (!result.isPresent()) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        Optional<Projects> result1 = projectsRepository.findByprojectname(newProject.getProjectname(), userId);
        if (result1.isPresent()) {
            return new ResponseEntity<>(HttpStatus.CONFLICT);
        }
        newProject.setId(0);
        newProject.setUser(result.get());
        projectsRepository.save(newProject);
        return new ResponseEntity<>(newProject, HttpStatus.CREATED);
    }

    @CrossOrigin(origins = {"http://localhost:3000", "http://gazelle.cc.gatech.edu:9102", "http://gazelle.cc.gatech.edu:9104"})
    @PutMapping("/ptt/users/{userId}/projects/{projectId}")
    public ResponseEntity<Projects> putProject(@PathVariable int userId, @PathVariable int projectId, @Valid @RequestBody Projects newProject) {
        Projects oldProject = projectsRepository.getUsersProject(userId, projectId);
        if(oldProject == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        User mappedUser = oldProject.getUser();
        if (mappedUser.getId() != userId) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }

        Optional<Projects> result1 = projectsRepository.findByprojectname(newProject.getProjectname(), userId);
        String temp = projectsRepository.findByprojectId(projectId).getProjectname();
        if (result1.isPresent() && !newProject.getProjectname().equals(temp)) {
            return new ResponseEntity<>(HttpStatus.CONFLICT);
        }

        newProject.setId(projectId);
        newProject.setUser(mappedUser);
        projectsRepository.save(newProject);
        return new ResponseEntity<>(newProject, HttpStatus.OK);
    }

    @CrossOrigin(origins = {"http://localhost:3000", "http://gazelle.cc.gatech.edu:9102", "http://gazelle.cc.gatech.edu:9104"})
    @DeleteMapping("/ptt/users/{userId}/projects/{projectId}")
    public ResponseEntity<Projects> deleteProject(@PathVariable int userId, @PathVariable int projectId) {

        Projects oldProject = projectsRepository.getUsersProject(userId, projectId);
        if(oldProject == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        projectsRepository.deleteById(projectId);
        return new ResponseEntity<>(oldProject,HttpStatus.OK);
    }

}
